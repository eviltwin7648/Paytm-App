// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // ensure this is here
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String?   @unique
  name     String?
  number   String    @unique
  password String
  Balance  Balance[]
  onRampTransaction onRampTransaction[]
  sentTransactions     Transaction[] @relation(name: "sender")
  receivedTransactions Transaction[] @relation(name: "receiver")
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int 
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model onRampTransaction {
  id Int @id @default(autoincrement())
  status onRampStatus
  provider String
  token String @unique
  amount Int
  startTime DateTime
  userId Int
  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id Int @id @default(autoincrement())
  amount Int
  toUser Int
  fromUser Int
  time DateTime @default(now())
  from User @relation(fields:[fromUser], references:[id], name: "sender")
  to   User @relation(fields:[toUser], references:[id], name: "receiver")
}

enum AuthType {
  Github
  Google
}

enum onRampStatus {
  Success
  Failure
  Processing
}